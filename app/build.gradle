apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.example.user.kotlin_mvvm_sample"
        minSdkVersion 22
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    dataBinding {
        enabled = true
    }

    buildTypes {
        debug {
//            buildConfigField("String", "BASE_URL", "\"https://jsonplaceholder.typicode.com\"")
            buildConfigField("String", "BASE_URL", "\"https://jsonplaceholder.typicode.com\"")
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:28.0.0'// Support Design
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    testImplementation 'org.mockito:mockito-core:2.23.0'
    testImplementation 'android.arch.core:core-testing:1.1.1'
    testImplementation 'org.mockito:mockito-inline:2.8.47'

    //lifecycle
    implementation "android.arch.lifecycle:extensions:${rootProject.ext.lifecycleVersion}"
//  kapt "android.arch.lifecycle:compiler:${rootProject.ext.lifecycleVersion}"

//     dagger
//    implementation "com.google.dagger:dagger-android:{rootProject$.ext.dagger2Version}"
//    kapt "com.google.dagger:dagger-compiler:${rootProject.ext.dagger2Version}"
//    kapt "com.google.dagger:dagger-android-processor:${rootProject.ext.dagger2Version}"
//    implementation "com.google.dagger:dagger-android-support:${rootProject.ext.dagger2Version}"

    implementation "com.google.dagger:dagger:${rootProject.ext.dagger2Version}"
    kapt "com.google.dagger:dagger-compiler:${rootProject.ext.dagger2Version}"
    kapt "com.google.dagger:dagger-android-processor:${rootProject.ext.dagger2Version}"
    implementation "com.google.dagger:dagger-android-support:${rootProject.ext.dagger2Version}"

    //room
    implementation "android.arch.persistence.room:runtime:${rootProject.ext.roomVersion}"
    kapt "android.arch.persistence.room:compiler:${rootProject.ext.roomVersion}" // use kapt for Kotlin
    implementation "android.arch.persistence.room:rxjava2:${rootProject.ext.roomVersion}"

    //moshi
    implementation "com.squareup.moshi:moshi-kotlin:${rootProject.ext.moshiKotlinVersion}"
    implementation "com.squareup.moshi:moshi-adapters:${rootProject.ext.moshiKotlinVersion}"

    //Retrofit
    implementation "com.squareup.retrofit2:retrofit:${rootProject.ext.retrofitVersion}"
    implementation "com.squareup.retrofit2:converter-moshi:${rootProject.ext.retrofitVersion}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${rootProject.ext.retrofitVersion}"

    //RxJava RxAndroid
    implementation "io.reactivex.rxjava2:rxjava:${rootProject.ext.rxJava2Version}"
    implementation "io.reactivex.rxjava2:rxandroid:${rootProject.ext.rxAndroidVersion}"
}
